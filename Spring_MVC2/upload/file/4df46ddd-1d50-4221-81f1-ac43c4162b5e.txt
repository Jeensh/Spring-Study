	1. MySQL의 구조

안녕하세요 여러분~ 

잘 지내셨나요?

오늘은 데이터베이스 수업을 할 거에요.

웹서버는 데이터베이스를 필수로 끼고서 작업을 해요.







데이터베이스는 말 그대로 데이터를 저장하는 곳이에요.

지금 우리가 사용하는 컴퓨터의 SSD와 같은 스토리지도 데이터를 저장하는데,

데이터베이스는 이와 차이가 무엇인지 궁금하시죠?

너무 깊게 들어갈 필요 없이 데이터베이스는 많은 데이터들을 단순히 저장만 하는 것이 아니라

사용하기 쉽도록 관리해준다고 생각하시면 돼요!

그리고 데이터베이스는 "관련 있는 데이터들의 집합" 정도라고 이해하면 됩니다.





그래서 데이터베이스 내에는 여러 테이블이 포함되어 있어요!

그리고 연관된 데이터들을 그룹화 한 것을 '스키마'라고 해요.

보통 스키마와 데이터베이스를 동급이라고 여겨요.




예를 들어, "학교"라는 데이터베이스를 만들게 되면 

그 안에는 학생들을 저장하기 위한 학생 테이블, 선생 테이블, 교실 정보 담는 테이블 등등이 모여 있겠죠?

학교라는 스키마(데이터베이스) 안에 관련된 테이블(데이터)들이 모여있는 거죠.




이러한 스키마들이 많아지면 이것을 저장하는 공간이 필요한데,

그것을 '데이터베이스 서버'라고 해요.

이를 정리하면 다음의 구조를 가져요!




	데이터베이스 서버 > 데이터베이스(스키마) > 테이블(표)




그리고 우리가 설치한 MySQL은 대표적인 데이터베이스 서버입니다!

그렇다면 SQL이란 뭘까요?



Strucured Query Language의 줄임말이에요.




쿼리 언어란, 현재 우리가 배우는 관계형 데이터베이스에서 CRUD의 데이터 조작 작업을 지원해주는 특수한 언어라고 생각하시면 돼요!



CRUD는 HTTP의 특징이며, 저번 수업에서 배웠던 기억 나시죠?

그리고 이번 수업은 데이터베이스를 깊게 들어가지 않고 

실습 가능한 정도까지 다룰 겁니다.

현재 다들 아직 DB 수업을 듣지 않으셨고, 

이는 컴퓨터공학의 핵심 과목으로 교수님 수업 때 열심히 들으세요!

자 그러면 이제 시작하죠!




	2. MySQL 서버 접속

윈도우 기준 MySQL 5.7 Command Line Client를 켜세요.

우리는 명령어 기반의 UI에서 쿼리문 실습을 할 거에요

가장 먼저 비밀번호 입력을 요구하죠?

이는 root라는 계정의 비밀번호를 요구하는 거에요.

아마 처음에 설치하실 때, 다들 자기 비밀번호를 만들었을 거에요!

그리고 이 root 계정은 관리자에요.

모든 권한이 열려있죠!

그래서 이 계정으로 작업을 하게될 시 보안 상 위험해요


일단 개인 비밀번호를 입력하여 MySQL에 접속해 봅시다!




	3. DML, DDL, DCL

SQL은 쿼리 랭귀지로, 데이터베이스를 조작하는 언어이며, 

크게 이렇게 3가지로 나뉘어요.

- DML(Data Manipulation Language) : 데이터 조작어

얘는 해석 그대로 데이터 조작 언어에요.

HTTP의 특징인 CRUD를 담당하죠.

SELECT => Read
INSERT => Create
UPDATE => Update
DELETE => Delete

이렇게 4가지 종류가 있어요.


- DDL(Data Definition Language) : 데이터 정의어

데이터를 담는 테이블의 구조를 정의하는데 사용하는 명령어에요.

대표적으로 CREATE, DROP이 있죠.


- DCL(Data Control Language) : 데이터 제어어

데이터베이스에 접근하고, 객체들을 사용할 수 있게 권한 부여를 담당합니다.

대표적으로 GRANT, REVOKE가 있어요.

이번 수업에서는 자세히 안 다룹니다.




	4. MySQL 스키마의 사용 => DDL

SQL의 대표 명령어 중 DDL을 적용해 보죠!

데이터베이스 서버에 접속했다면,

데이터베이스(스키마)를 '생성'해야 합니다.

그 명령어는 다음과 같아요.

	CREATE DATABASE temp;    (<= 얘는 우리가 생성하고자 하는 스키마의 이름) 

이러면 데이터베이스 서버인 MySQL에 temp라는 데이터베이스가 생겼겠죠?

그 목록을 보기 위해서 다음의 명령어를 치세요.

	show databases;


그리고 이렇게 생성한 데이터베이스를 삭제하는 명령어는 다음과 같죠.

	DROP DATABASE temp;

다시 show databases;를 기입하면 삭제된 것이 보이죠?

이제 실습할 데이터베이스를 만듭시다.

이름은 임의로 만드는데, 

제 수업이니

	CREATE DATABASE kyomin;

으로 만들죠!!

그리고 kyomin 데이터베이스를 사용하는 상태로 만들기 위해

	use kyomin;

을 기입하면 됩니다.

이렇게 되면 kyomin이라는 데이터베이스를 대상으로

명령어가 적용되는 겁니다.




	5. MySQL의 테이블 생성

엑셀 해 보신분?

데이터베이스에서 데이터들은 기본적으로 테이블 단위로 관리돼요.

엑셀과 비슷합니다.

당연히 테이블이니 행과 열이 존재하죠?

행에는 데이터,

열은 해당 데이터가 갖고 있는 속성 하나 하나가 기술됩니다.


오늘의 데이터베이스 실습 컨셉은 '작가' 정보를 관리하는 컨셉으로 가죠.

일단 작가 정보를 저장할 수 있는 author란 이름의 테이블을 만듭시다!

다음의 명령어를 기입하세요


CREATE TABLE author(
	id INT(11) NOT NULL AUTO_INCREMENT,
	name VARCHAR(100) NOT NULL,
	email VARCHAR(100) NOT NULL,
	book VARCHAR(100) NULL,

	PRIMARY KEY (id)
);


그리고 엔터 => Query OK!

	show tables;

를 치면 author라는 테이블이 생긴 것이 보입니다.




	6. Primary Key, Unique Key, Forign Key


자 우리가 테이블을 생성하면서 테이블의 구조를 잡았죠?

각 필드는 어느 자료형을 갖고, 어떤 것을 PK로 쓰는지 등등이요!

이렇게 DB에는 대표적인 키가 3개 있어요!

테이블에는 데이터가 어마어마하게 담기겠죠?

그런데, 각 행을 식별할 수 있는 특정 값이 필요해요!

그것을 PK라고 해요!

예를 들어, 지금의 예제와 같이 작가 정보가 삽입될 때마다 저 AUTO_INCREMENT

옵션으로 id 정수 값을 늘려간다면

각 행마다 id 값이 겹치지 않겠죠?

그래서 이것을 PK로 선정한 거에요.

그리고 또 하나!

사람마다 갖고 있는 email은 다르죠?

예를 들어, 네이버에서 사람마다 이메일 값은 다 다르잖아요.

그렇다면 id값 말고도 email로도 식별 가능하죠?

이렇게 포괄적으로 식별 가능한 필드들을 유니크 키(여러 개, 이메일, 주민번호, id)라고 하고,

그 중에서 DB를 설계한 우리가 특정 키를 선정한 것을 PK라고 합니다.

FK는 대략 내용만 설명하자면,

다른 테이블의 값을 참조할 수 있는 필드를 얘기해요.

RDBMS 즉, 관계형 데이터베이스 시스템에서는 테이블을 쪼개서 관리를 하며

각 테이블 간의 관계를 정의해요.

예를 들어, 지금은 간단한 작가 테이블을 설정했지만,

만일 book이라는 테이블이 있고,

해당 작가 테이블을 통해 book 테이블을 참조하여

작가가 쓴 책들을 가져올 수 있도록 도와주는 것이 FK입니다.




	7. SQL의 INSERT 구문 : Create

자, 테이블을 생성했으니 데이터를 삽입해 봅시다.

INSERT INTO author (name, email) VALUES('kyomin', 'kim031504@naver.com');

id는 auto_increment 이므로 구지 값을 지정하지 않아도 자동으로 값이 정해집니다.




	8. SQL의 SELECT 구문 : HTTP CRUD의 READ!

SELECT "표시하고자 하는 컬럼명"
FROM "테이블"
WHERE "조건"

ORDER BY 컬럼 DESC; // 내림차순으로 정렬! 오름차순은 디폴트!


select * from author;




	9. SQL의 UPDATE 구문

UPDATE "테이블 이름"
SET "컬럼명" = "바꾸고자 하는 값"
WHERE "해당 컬럼의 특정 값을 지정할 수 있는 조건문";

=> WHERE문은 필수이다. 안 넣으면 해당 컬럼에 대한 모든 행이 다 바뀐다.

UPDATE author
SET name = "kyomin"
WHERE id = 1;




	10. SQL의 DELETE 구문

DELETE FROM "테이블"
WHERE "특정 행을 지정할 수 있는 조건문";

ex)

DELETE FROM author
WHERE id = 1;

=> id값이 1인 행을 삭제한다!


HTTP => CRUD => INSERT, SELECT, UPDATE, DELETE => DML




RDBMS => 기업, 학교 관계형 디비 중요하다. 

논문이나 수업자료가 방대.


TABLE1 <--->  TABLE2


	11. 관계형 데이터베이스의 필요성

* 프로그래밍에서는 중복되는 거는 진짜 피해야 한다.

중복코드, 중복 작업 등등

한 테이블에서 몇몇 행의 컬럼 값이 중복된다고 가정합시다.

여기서, 그 행의 개수가 많아지면 데이터의 손해입니다.


심지어, 중복되는 컬럼을 갖고 있는 행이 엄청 많으면,

해당 컬럼을 수정할 때, 많은 수정이 필요합니다.


ex) "작가"란 컬럼에서 작가는 한 명인데, 
이 사람이 쓴 책이 많으면 행당 책들의 행들은 작가 컬럼의 값이 중복된다.

여기서, 작가의 이름이 개명되면 다수의 행을 수정해야 한다.

즉, 우리가 정의한 테이블을 분리할 필요가 있습니다.


<author>

id	name	email	book

=> 


<author>

id	name	email


<book>

id	title	description	author_id



이렇게 분리하면,

book 테이블에서는 author_id를 통해 author 테이블을 참조하여

작가의 정보를 알 수 있죠?

즉, author_id는 아까 말한 다른 테이블을 참조하는 FK입니다.




	12. 테이블 분리하기


기존 테이블을 삭제하죠!

	DROP TABLE author;

그리고 다시 만듭시다!


일단 author!

<author>

CREATE TABLE author(
	id INT(11) NOT NULL AUTO_INCREMENT,
	name VARCHAR(100) NOT NULL,
	email VARCHAR(100) NOT NULL,

	PRIMARY KEY (id)
);


그다음 책의 정보 book!

CREATE TABLE book(
	id INT(11) NOT NULL AUTO_INCREMENT,
	title VARCHAR(100) NOT NULL,
	description TEXT,
	author_id INT(11),

	PRIMARY KEY (id)
);


--- Dummy Data ---

INSERT INTO author VALUES (1, 'kyo', 'kim@naver.com');
INSERT INTO author VALUES (2, 'min', 'kyo@naver.com');

INSERT INTO book VALUES (1, 'MySQL', 'MySQL is nice', 1);
INSERT INTO book VALUES (2, 'Oracle', 'Oracle is good', 1);
INSERT INTO book VALUES (3, 'MongoDB', 'MongoDB is cool', 2);



---naver 

<회원>

id / email / nickname / password .... / comment_articles /..... 







	13. JOIN 연산 !!

이렇게 분리된 테이블을 합칠 필요가 실무에서는 많아집니다.

즉, 테이블을 하나의 객체로 보면 서로 연결된 테이블을 찾으면서

필요한 정보를 모은다고 생각하면 돼요.

간단하게 실습을 해보죠!

위에서 정의했던 author와 book 테이블을 JOIN 연산을 통해서 합성해 봅시다!


// 왼쪽 book 테이블에 author 테이블을 조인하라!
// 기준은 book의 author_id와 author의 id 값이다.
SELECT *
FROM book LEFT JOIN author
ON book.author_id = author.id;


여기서 author_id와 id 컬럼도 같이 따라나오죠?

이를 빼고서 원하는 컬럼만 명시해서 얻어낼 수도 있어요


SELECT id, title, description, name
FROM book LEFT JOIN author
ON book.author_id = author.id;


이때, 에러가 발생하죠?!

Column 'id' in field list is ambiguous

즉, book에도, author에도 id란 컬럼이 있기 때문에, 애매모호하다는 에러가 발생한다!

이 경우에는 확실히 하기 위해서 id 앞에다가 book.id라고 확실하게 명시해준다.


SELECT book.id, title, description, name
FROM book LEFT JOIN author
ON book.author_id = author.id;


<정리>

- 데이터베이스 서버(데이터베이스들을 모아서 관리하는 것 MySQL, Oracle, MongoDB ...)  > 데이터베이스(스키마) > 테이블

- 스키마(데이터베이스)는 의미 있는 데이터들의 집합이다.

- 웹 구조


Client(브라우저, View) ---------------- 						Server ----------- 				DataBase

회원가입(Register)      -> POST Request		api /api/member/register	 ->	handle(post로 왔으니 Create 작업이구나.)   ->	Insert 쿼리문으로 저장
form => name, password, email ... 




HTTP => OSI의 7계층의 7층(어플리케이션 계층)

		HTTP Method	a	DML(데이터베이스를 조작하기 위한 쿼리 언어)
Create	=> 	POST		=> 	Insert
Read 	=> 	GET		=>	Select
Update	=> 	PUT		=> 	Update
Delete	=> 	Delete		=> 	Delete



웹 애플리케이션 => 7계층



CLI => Command Line Interface
GUI => Graphic User Interface


DB


RDBMS => SQL 작업 => Oracle , MySQL



NoSQL => MongoDB

쿼리문이 없다.

